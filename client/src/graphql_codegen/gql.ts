/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CreateCommentReply($input: CreateCommentReplyInput!) {\n    createCommentReply(input: $input) {\n      ... on CreateCommentReplySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.CreateCommentReplyDocument,
    "\n  mutation UserJoinCommunity($input: UserJoinCommunityInput!) {\n    userJoinCommunity(input: $input) {\n      ... on UserJoinCommunitySuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": types.UserJoinCommunityDocument,
    "\n  mutation CreateCommunityPost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      ... on CreatePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.CreateCommunityPostDocument,
    "\n  mutation Mutation($input: ChangeCommunityTitleInput!) {\n    changeCommunityTitle(input: $input) {\n      ... on ChangeCommunityTitleSuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n      ... on ChangeCommunityTitleInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          newTitle\n        }\n      }\n    }\n  }\n": types.MutationDocument,
    "\n  mutation DeleteCommunity($input: DeleteCommunityInput!) {\n    deleteCommunity(input: $input) {\n      ... on DeleteCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteCommunityInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          title\n        }\n      }\n    }\n  }\n": types.DeleteCommunityDocument,
    "\n  mutation Logout {\n    logout {\n      ... on LogoutSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n": types.LogoutDocument,
    "\n  mutation EditPost($input: EditPostInput!) {\n    editPost(input: $input) {\n      ... on EditPostSuccess {\n        __typename\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.EditPostDocument,
    "\n  mutation DeletePost($input: DeletePostInput!) {\n    deletePost(input: $input) {\n      ... on DeletePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n": types.DeletePostDocument,
    "\n  mutation CreateComment($input: CreateCommentInput!) {\n    createComment(input: $input) {\n      ... on CreateCommentSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.CreateCommentDocument,
    "\n  query ProfileCommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          parent {\n            id\n          }\n          post {\n            id\n            title\n            owner {\n              id\n              username\n            }\n            community {\n              id\n              title\n            }\n            created_at\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n": types.ProfileCommentFeedDocument,
    "\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      ... on DeleteUserSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteUserInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          password\n          username\n        }\n      }\n    }\n  }\n": types.DeleteUserDocument,
    "\n  mutation ChangePassword($input: ChangePasswordInput!) {\n    changePassword(input: $input) {\n      ... on ChangePasswordSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on ChangePasswordInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          currentPassword\n          newPassword\n        }\n      }\n    }\n  }\n": types.ChangePasswordDocument,
    "\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input) {\n      ... on ChangeUsernameSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n      ... on ChangeUsernameInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          username\n          password\n        }\n      }\n    }\n  }\n": types.ChangeUsernameDocument,
    "\n  query CommunitiesSearch($input: CommunitiesInput!) {\n    communities(input: $input) {\n      edges {\n        node {\n          id\n          memberCount\n          title\n          created_at\n        }\n      }\n    }\n  }\n": types.CommunitiesSearchDocument,
    "\n  query UsersSearch($input: UsersInput!) {\n    users(input: $input) {\n      edges {\n        node {\n          username\n          created_at\n          postsCount\n          commentsCount\n        }\n      }\n    }\n  }\n": types.UsersSearchDocument,
    "\n  query AuthUser {\n    authUser {\n      ... on AuthUserSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n    }\n  }\n": types.AuthUserDocument,
    "\n  mutation VotePost($input: VotePostInput!) {\n    votePost(input: $input) {\n      ... on VotePostSuccess {\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n": types.VotePostDocument,
    "\n  query Community($input: CommunityInput!) {\n    community(input: $input) {\n      id\n      memberCount\n      postCount\n      inCommunity\n      owner {\n        id\n        username\n      }\n      title\n      created_at\n      updated_at\n    }\n  }\n": types.CommunityDocument,
    "\n  query PostFeed($input: PostsInput!) {\n    posts(input: $input) {\n      edges {\n        node {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          voteSum\n          created_at\n        }\n        hasNextPage\n      }\n    }\n  }\n": types.PostFeedDocument,
    "\n  query CommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n": types.CommentFeedDocument,
    "\n  query UsernameExists($username: String!) {\n    usernameExists(username: $username)\n  }\n": types.UsernameExistsDocument,
    "\n  query CommunityTitleExists($title: String!) {\n    titleExists(title: $title)\n  }\n": types.CommunityTitleExistsDocument,
    "\n  query SinglePost($input: PostInput!) {\n    post(input: $input) {\n      id\n      body\n      created_at\n      title\n      commentCount\n      voteSum\n      voteStatus\n      community {\n        id\n        title\n      }\n      owner {\n        id\n        username\n      }\n    }\n  }\n": types.SinglePostDocument,
    "\n  mutation VoteComment($input: VoteCommentInput!) {\n    voteComment(input: $input) {\n      ... on VoteCommentSuccess {\n        successMsg\n        code\n        comment {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n    }\n  }\n": types.VoteCommentDocument,
    "\n  mutation CreateCommunity($input: CreateCommunityInput!) {\n    createCommunity(input: $input) {\n      ... on CreateCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.CreateCommunityDocument,
    "\n  mutation LoginUsername($input: LoginUsernameInput!) {\n    loginUsername(input: $input) {\n      ... on LoginUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.LoginUsernameDocument,
    "\n  query GetUser($input: UserInput!) {\n    user(input: $input) {\n      commentsCount\n      created_at\n      id\n      postsCount\n      provider\n      updated_at\n      username\n    }\n  }\n": types.GetUserDocument,
    "\n  mutation RegisterUsername($input: RegisterUsernameInput!) {\n    registerUsername(input: $input) {\n      ... on RegisterUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n": types.RegisterUsernameDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCommentReply($input: CreateCommentReplyInput!) {\n    createCommentReply(input: $input) {\n      ... on CreateCommentReplySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCommentReply($input: CreateCommentReplyInput!) {\n    createCommentReply(input: $input) {\n      ... on CreateCommentReplySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UserJoinCommunity($input: UserJoinCommunityInput!) {\n    userJoinCommunity(input: $input) {\n      ... on UserJoinCommunitySuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UserJoinCommunity($input: UserJoinCommunityInput!) {\n    userJoinCommunity(input: $input) {\n      ... on UserJoinCommunitySuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCommunityPost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      ... on CreatePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCommunityPost($input: CreatePostInput!) {\n    createPost(input: $input) {\n      ... on CreatePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Mutation($input: ChangeCommunityTitleInput!) {\n    changeCommunityTitle(input: $input) {\n      ... on ChangeCommunityTitleSuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n      ... on ChangeCommunityTitleInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          newTitle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Mutation($input: ChangeCommunityTitleInput!) {\n    changeCommunityTitle(input: $input) {\n      ... on ChangeCommunityTitleSuccess {\n        __typename\n        successMsg\n        code\n        community {\n          id\n          memberCount\n          postCount\n          inCommunity\n          owner {\n            id\n            username\n          }\n          title\n          created_at\n          updated_at\n        }\n      }\n      ... on ChangeCommunityTitleInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          newTitle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteCommunity($input: DeleteCommunityInput!) {\n    deleteCommunity(input: $input) {\n      ... on DeleteCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteCommunityInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCommunity($input: DeleteCommunityInput!) {\n    deleteCommunity(input: $input) {\n      ... on DeleteCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteCommunityInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout {\n      ... on LogoutSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout {\n      ... on LogoutSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditPost($input: EditPostInput!) {\n    editPost(input: $input) {\n      ... on EditPostSuccess {\n        __typename\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditPost($input: EditPostInput!) {\n    editPost(input: $input) {\n      ... on EditPostSuccess {\n        __typename\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeletePost($input: DeletePostInput!) {\n    deletePost(input: $input) {\n      ... on DeletePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeletePost($input: DeletePostInput!) {\n    deletePost(input: $input) {\n      ... on DeletePostSuccess {\n        __typename\n        successMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateComment($input: CreateCommentInput!) {\n    createComment(input: $input) {\n      ... on CreateCommentSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateComment($input: CreateCommentInput!) {\n    createComment(input: $input) {\n      ... on CreateCommentSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProfileCommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          parent {\n            id\n          }\n          post {\n            id\n            title\n            owner {\n              id\n              username\n            }\n            community {\n              id\n              title\n            }\n            created_at\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProfileCommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          parent {\n            id\n          }\n          post {\n            id\n            title\n            owner {\n              id\n              username\n            }\n            community {\n              id\n              title\n            }\n            created_at\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      ... on DeleteUserSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteUserInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          password\n          username\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      ... on DeleteUserSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on DeleteUserInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          password\n          username\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangePassword($input: ChangePasswordInput!) {\n    changePassword(input: $input) {\n      ... on ChangePasswordSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on ChangePasswordInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          currentPassword\n          newPassword\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChangePassword($input: ChangePasswordInput!) {\n    changePassword(input: $input) {\n      ... on ChangePasswordSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on ChangePasswordInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          currentPassword\n          newPassword\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input) {\n      ... on ChangeUsernameSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n      ... on ChangeUsernameInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          username\n          password\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ChangeUsername($input: ChangeUsernameInput!) {\n    changeUsername(input: $input) {\n      ... on ChangeUsernameSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n      ... on ChangeUsernameInputError {\n        __typename\n        errorMsg\n        code\n        inputErrors {\n          username\n          password\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CommunitiesSearch($input: CommunitiesInput!) {\n    communities(input: $input) {\n      edges {\n        node {\n          id\n          memberCount\n          title\n          created_at\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommunitiesSearch($input: CommunitiesInput!) {\n    communities(input: $input) {\n      edges {\n        node {\n          id\n          memberCount\n          title\n          created_at\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersSearch($input: UsersInput!) {\n    users(input: $input) {\n      edges {\n        node {\n          username\n          created_at\n          postsCount\n          commentsCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UsersSearch($input: UsersInput!) {\n    users(input: $input) {\n      edges {\n        node {\n          username\n          created_at\n          postsCount\n          commentsCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AuthUser {\n    authUser {\n      ... on AuthUserSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AuthUser {\n    authUser {\n      ... on AuthUserSuccess {\n        __typename\n        successMsg\n        code\n        user {\n          username\n          updated_at\n          provider\n          id\n          created_at\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VotePost($input: VotePostInput!) {\n    votePost(input: $input) {\n      ... on VotePostSuccess {\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VotePost($input: VotePostInput!) {\n    votePost(input: $input) {\n      ... on VotePostSuccess {\n        successMsg\n        code\n        post {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Community($input: CommunityInput!) {\n    community(input: $input) {\n      id\n      memberCount\n      postCount\n      inCommunity\n      owner {\n        id\n        username\n      }\n      title\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query Community($input: CommunityInput!) {\n    community(input: $input) {\n      id\n      memberCount\n      postCount\n      inCommunity\n      owner {\n        id\n        username\n      }\n      title\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PostFeed($input: PostsInput!) {\n    posts(input: $input) {\n      edges {\n        node {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          voteSum\n          created_at\n        }\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query PostFeed($input: PostsInput!) {\n    posts(input: $input) {\n      edges {\n        node {\n          id\n          body\n          created_at\n          title\n          commentCount\n          voteSum\n          voteStatus\n          community {\n            id\n            title\n          }\n          owner {\n            id\n            username\n          }\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          voteSum\n          created_at\n        }\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query CommentFeed($input: CommentsInput!) {\n    comments(input: $input) {\n      edges {\n        node {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n      pageInfo {\n        endCursor {\n          id\n          created_at\n          voteSum\n        }\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsernameExists($username: String!) {\n    usernameExists(username: $username)\n  }\n"): (typeof documents)["\n  query UsernameExists($username: String!) {\n    usernameExists(username: $username)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CommunityTitleExists($title: String!) {\n    titleExists(title: $title)\n  }\n"): (typeof documents)["\n  query CommunityTitleExists($title: String!) {\n    titleExists(title: $title)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SinglePost($input: PostInput!) {\n    post(input: $input) {\n      id\n      body\n      created_at\n      title\n      commentCount\n      voteSum\n      voteStatus\n      community {\n        id\n        title\n      }\n      owner {\n        id\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query SinglePost($input: PostInput!) {\n    post(input: $input) {\n      id\n      body\n      created_at\n      title\n      commentCount\n      voteSum\n      voteStatus\n      community {\n        id\n        title\n      }\n      owner {\n        id\n        username\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteComment($input: VoteCommentInput!) {\n    voteComment(input: $input) {\n      ... on VoteCommentSuccess {\n        successMsg\n        code\n        comment {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VoteComment($input: VoteCommentInput!) {\n    voteComment(input: $input) {\n      ... on VoteCommentSuccess {\n        successMsg\n        code\n        comment {\n          body\n          created_at\n          id\n          post {\n            id\n          }\n          owner {\n            id\n            username\n          }\n          voteSum\n          voteStatus\n          replyCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCommunity($input: CreateCommunityInput!) {\n    createCommunity(input: $input) {\n      ... on CreateCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCommunity($input: CreateCommunityInput!) {\n    createCommunity(input: $input) {\n      ... on CreateCommunitySuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginUsername($input: LoginUsernameInput!) {\n    loginUsername(input: $input) {\n      ... on LoginUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginUsername($input: LoginUsernameInput!) {\n    loginUsername(input: $input) {\n      ... on LoginUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUser($input: UserInput!) {\n    user(input: $input) {\n      commentsCount\n      created_at\n      id\n      postsCount\n      provider\n      updated_at\n      username\n    }\n  }\n"): (typeof documents)["\n  query GetUser($input: UserInput!) {\n    user(input: $input) {\n      commentsCount\n      created_at\n      id\n      postsCount\n      provider\n      updated_at\n      username\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RegisterUsername($input: RegisterUsernameInput!) {\n    registerUsername(input: $input) {\n      ... on RegisterUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterUsername($input: RegisterUsernameInput!) {\n    registerUsername(input: $input) {\n      ... on RegisterUsernameSuccess {\n        __typename\n        successMsg\n        code\n      }\n      ... on Error {\n        __typename\n        errorMsg\n        code\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;