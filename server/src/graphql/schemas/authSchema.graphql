type Query {
  authUser: AuthUserResult! @rateLimit(limit: 2000, duration: 300)
}

type Mutation {
  registerUsername(input: RegisterUsernameInput!): RegisterUsernameResult!
    @rateLimit(limit: 10, duration: 600)
  loginUsername(input: LoginUsernameInput!): LoginUsernameResult!
    @rateLimit(limit: 200, duration: 3600)
  logout: LogoutResult! @rateLimit(limit: 200, duration: 3600)
}

# -- REGISTERUSERNAME MUTATION
union RegisterUsernameResult =
    RegisterUsernameSuccess
  | RegisterUsernameInputError

input RegisterUsernameInput {
  username: String!
  password: String!
}

type RegisterUsernameSuccess implements Success {
  successMsg: String
  code: Int!
}

type RegisterUsernameInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: RegisterUsernameInputErrors!
}

type RegisterUsernameInputErrors {
  username: String
  password: String
}

# -- LOGINUSERNAME MUTATION
union LoginUsernameResult = LoginUsernameSuccess | LoginUsernameInputError

input LoginUsernameInput {
  username: String!
  password: String!
}

type LoginUsernameSuccess implements Success {
  successMsg: String
  code: Int!
  user: User!
}

type LoginUsernameInputError implements Error {
  errorMsg: String!
  code: Int!
}

# -- AUTHUSER QUERY
union AuthUserResult = AuthUserSuccess

input AuthUserInput {
  userId: String!
}

type AuthUserSuccess implements Success {
  successMsg: String
  code: Int!
  user: User
}

# -- LOGOUT MUTATION
union LogoutResult = LogoutSuccess

type LogoutSuccess implements Success {
  successMsg: String!
  code: Int!
}
