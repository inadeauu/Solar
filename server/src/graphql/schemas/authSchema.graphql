type Query {
  authUser: AuthUserResult!
}

type Mutation {
  registerUsername(input: RegisterUsernameInput!): RegisterUsernameResult!
  loginUsername(input: LoginUsernameInput!): LoginUsernameResult!
  logout: LogoutResult!
}

# -- REGISTERUSERNAME MUTATION
union RegisterUsernameResult =
    RegisterUsernameSuccess
  | RegisterUsernameInputError
  | DuplicateUsernameError

input RegisterUsernameInput {
  username: String!
  password: String!
}

type RegisterUsernameSuccess implements Success {
  successMsg: String
  code: Int!
}

type RegisterUsernameInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: RegisterUsernameInputErrors!
}

type RegisterUsernameInputErrors {
  username: String
  password: String
}

# -- LOGINUSERNAME MUTATION
union LoginUsernameResult = LoginUsernameSuccess | LoginUsernameInputError

input LoginUsernameInput {
  username: String!
  password: String!
}

type LoginUsernameSuccess implements Success {
  successMsg: String
  code: Int!
}

type LoginUsernameInputError implements Error {
  errorMsg: String!
  code: Int!
}

# -- AUTHUSER QUERY
union AuthUserResult = AuthUserSuccess

input AuthUserInput {
  userId: String!
}

type AuthUserSuccess implements Success {
  successMsg: String
  code: Int!
  user: User
}

# -- LOGOUT MUTATION
union LogoutResult =
    LogoutSuccess
  | LogoutSessionDestroyError
  | AuthenticationError

type LogoutSuccess implements Success {
  successMsg: String!
  code: Int!
}

type LogoutSessionDestroyError implements Error {
  errorMsg: String!
  code: Int!
}
