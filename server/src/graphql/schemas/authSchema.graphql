type Query {
  authUser: AuthUserResult!
}

type Mutation {
  registerEmail(input: RegisterEmailInput!): RegisterEmailResult!
  loginEmail(input: LoginEmailInput!): LoginEmailResult!
}

# REGISTEREMAIL MUTATION
union RegisterEmailResult =
    RegisterEmailSuccess
  | RegisterEmailInputError
  | DuplicateEmailError

input RegisterEmailInput {
  username: String!
  email: String!
  password: String!
}

type RegisterEmailSuccess implements Success {
  successMsg: String
  code: Int!
}

type RegisterEmailInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: RegisterEmailInputErrors!
}

type RegisterEmailInputErrors {
  username: String
  email: String
  password: String
}

# LOGINEMAIL MUTATION
union LoginEmailResult = LoginEmailSuccess | LoginEmailInputError

input LoginEmailInput {
  email: String!
  password: String!
}

type LoginEmailSuccess implements Success {
  successMsg: String
  code: Int!
}

type LoginEmailInputError implements Error {
  errorMsg: String!
  code: Int!
}

# AUTHUSER QUERY
union AuthUserResult = AuthUserSuccess | AuthenticationError | UserNotFoundError

input AuthUserInput {
  userId: String!
}

type AuthUserSuccess implements Success {
  successMsg: String
  code: Int!
  user: User!
}
