scalar DateTime

type Query @rateLimit(limit: 300, duration: 60) {
  comment(input: CommentInput!): Comment
  comments(input: CommentsInput!): CommentConnection!
}

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentResult! @rateLimit(limit: 100, duration: 60)
  createCommentReply(input: CreateCommentReplyInput!): CreateCommentReplyResult! @rateLimit(limit: 100, duration: 60)
  voteComment(input: VoteCommentInput!): VoteCommentResult! @rateLimit(limit: 120, duration: 60)
  editComment(input: EditCommentInput!): EditCommentResult! @rateLimit(limit: 100, duration: 60)
  deleteComment(input: DeleteCommentInput!): DeleteCommentResult! @rateLimit(limit: 100, duration: 60)
}

type Comment {
  id: ID!
  body: String!
  created_at: DateTime!
  updated_at: DateTime!

  voteSum: Int!
  voteStatus: VoteStatus!
  replyCount: Int!

  owner: User!
  post: Post!
  parent: Comment
}

# -- COMMENT QUERY
input CommentInput {
  id: ID!
}

# -- COMMENTS QUERY
input CommentsInput {
  filters: CommentsFilters!
  paginate: PaginateInput!
}

input CommentsFilters {
  userId: ID
  postId: ID
  parentId: ID
  replies: Boolean
  orderBy: CommentOrderByType!
}

# -- CREATECOMMENT MUTATION
union CreateCommentResult = CreateCommentSuccess | CreateCommentInputError

input CreateCommentInput {
  body: String!
  postId: ID!
}

type CreateCommentSuccess implements Success {
  successMsg: String!
  code: Int!
}

type CreateCommentInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: CreateCommentInputErrors!
}

type CreateCommentInputErrors {
  body: String
}

# -- CREATECOMMENTREPLY MUTATION
union CreateCommentReplyResult = CreateCommentReplySuccess | CreateCommentReplyInputError

input CreateCommentReplyInput {
  body: String!
  commentId: ID!
}

type CreateCommentReplySuccess implements Success {
  successMsg: String!
  code: Int!
}

type CreateCommentReplyInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: CreateCommentReplyInputErrors!
}

type CreateCommentReplyInputErrors {
  body: String
  commentId: String
}

# -- EDITCOMMENT MUTATION
union EditCommentResult = EditCommentSuccess | EditCommentInputError

input EditCommentInput {
  commentId: ID!
  body: String!
}

type EditCommentSuccess implements Success {
  successMsg: String!
  code: Int!
  comment: Comment!
}

type EditCommentInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: EditCommentInputErrors!
}

type EditCommentInputErrors {
  body: String
}

# -- DELETECOMMENT MUTATION
input DeleteCommentInput {
  commentId: ID!
}

union DeleteCommentResult = DeleteCommentSuccess

type DeleteCommentSuccess implements Success {
  successMsg: String!
  code: Int!
}

# -- VOTECOMMENT MUTATION
union VoteCommentResult = VoteCommentSuccess

input VoteCommentInput {
  commentId: String!
  like: Boolean!
}

type VoteCommentSuccess implements Success {
  successMsg: String!
  code: Int!
  comment: Comment!
}

# -- ENUMS
enum CommentOrderByType {
  NEW
  OLD
  TOP
  LOW
}
