scalar DateTime

type Query @rateLimit(limit: 180, duration: 60) {
  comment(input: CommentInput!): Comment
  comments(input: CommentsInput!): CommentConnection!
}

type Mutation {
  createComment(input: CreateCommentInput!): CreateCommentResult!
    @rateLimit(limit: 5, duration: 60)
}

type Comment {
  id: ID!
  body: String!
  created_at: DateTime!
  updated_at: DateTime!

  owner: User!
  post: Post!
  children(input: CommentChildrenInput!): CommentConnection!
  parent: Comment
}

# -- COMMENT QUERY
input CommentInput {
  id: ID!
}

# -- COMMENTS QUERY
input CommentsInput {
  filters: CommentsFilters
  paginate: PaginateInput!
}

input CommentsFilters {
  userId: ID
  postId: ID
  parentId: ID
}

# -- CREATECOMMENT MUTATION
union CreateCommentResult = CreateCommentSuccess | CreateCommentInputError

input CreateCommentInput {
  body: String!
  postId: ID!
  commentId: ID
}

type CreateCommentSuccess implements Success {
  successMsg: String!
  code: Int!
}

type CreateCommentInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: CreateCommentInputErrors!
}

type CreateCommentInputErrors {
  body: String
  postId: String
  commentId: String
}

# -- RESOLVERS
input CommentChildrenInput {
  paginate: PaginateInput!
}
