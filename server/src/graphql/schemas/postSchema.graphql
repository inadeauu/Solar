scalar DateTime

type Query @rateLimit(limit: 300, duration: 60) {
  post(input: PostInput!): Post
  posts(input: PostsInput!): PostConnection!
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostResult! @rateLimit(limit: 100, duration: 60)
  votePost(input: VotePostInput!): VotePostResult! @rateLimit(limit: 120, duration: 60)
  editPost(input: EditPostInput!): EditPostResult! @rateLimit(limit: 100, duration: 60)
  deletePost(input: DeletePostInput!): DeletePostResult! @rateLimit(limit: 100, duration: 60)
}

type Post {
  id: ID!
  title: String!
  body: String!
  created_at: DateTime!
  updated_at: DateTime!

  commentCount: Int!
  voteSum: Int!
  voteStatus: VoteStatus!

  owner: User!
  community: Community!
}

# -- POST QUERY
input PostInput {
  id: ID!
}

# -- POSTS QUERY
input PostsInput {
  filters: PostsFilters!
  paginate: PaginateInput!
}

input PostsFilters {
  userId: ID
  communityId: ID
  orderBy: PostOrderByType!
}

# -- CREATEPOST MUTATION
union CreatePostResult = CreatePostSuccess | CreatePostInputError

input CreatePostInput {
  title: String!
  body: String
  communityId: ID!
}

type CreatePostSuccess implements Success {
  successMsg: String!
  code: Int!
  post: Post!
}

type CreatePostInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: CreatePostInputErrors!
}

type CreatePostInputErrors {
  title: String
  body: String
  communityId: String
}

# -- EDITPOST MUTATION
input EditPostInput {
  postId: ID!
  title: String!
  body: String!
}

union EditPostResult = EditPostSuccess | EditPostInputError

type EditPostSuccess implements Success {
  successMsg: String!
  code: Int!
  post: Post!
}

type EditPostInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: EditPostInputErrors!
}

type EditPostInputErrors {
  title: String
  body: String
}

# -- DELETEPOST MUTATION
input DeletePostInput {
  postId: ID!
}

union DeletePostResult = DeletePostSuccess

type DeletePostSuccess implements Success {
  successMsg: String!
  code: Int!
}

# -- VOTEPOST MUTATION
union VotePostResult = VotePostSuccess

input VotePostInput {
  postId: String!
  like: Boolean!
}

type VotePostSuccess implements Success {
  successMsg: String!
  code: Int!
  post: Post!
}

# -- ENUMS
enum PostOrderByType {
  NEW
  OLD
  TOP
  LOW
}
