scalar DateTime

type Query @rateLimit(limit: 180, duration: 60) {
  user(input: UserInput!): User
  users(input: UsersInput!): UserConnection!
  usernameExists(username: String!): Boolean!
    @rateLimit(limit: 200, duration: 60)
}

type Mutation {
  changeUsername(input: ChangeUsernameInput!): ChangeUsernameResult!
    @rateLimit(limit: 10, duration: 600)
  changePassword(input: ChangePasswordInput!): ChangePasswordResult!
    @rateLimit(limit: 10, duration: 600)
}

type User {
  id: ID!
  username: String!
  provider: Provider!
  created_at: DateTime!
  updated_at: DateTime!

  postsCount: Int!
  commentsCount: Int!
}

# -- USERS QUERY
input UsersInput {
  filters: UsersFilters
  paginate: PaginateInput!
}

input UsersFilters {
  usernameContains: String
  orderBy: UsersOrderBy
}

input UsersOrderBy {
  type: UserOrderByType!
}

# -- USER QUERY
input UserInput {
  username: String!
}

# -- CHANGEUSERNAME MUTATION
input ChangeUsernameInput {
  newUsername: String!
  password: String!
}

union ChangeUsernameResult = ChangeUsernameSuccess | ChangeUsernameInputError

type ChangeUsernameSuccess implements Success {
  successMsg: String!
  code: Int!
  user: User!
}

type ChangeUsernameInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: ChangeUsernameInputErrors!
}

type ChangeUsernameInputErrors {
  username: String
  password: String
}

# -- CHANGEPASSWORD MUTATION
input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

type ChangePasswordSuccess implements Success {
  successMsg: String!
  code: Int!
}

union ChangePasswordResult = ChangePasswordSuccess | ChangePasswordInputError

type ChangePasswordInputError implements Error {
  errorMsg: String!
  code: Int!
  inputErrors: ChangePasswordInputErrors!
}

type ChangePasswordInputErrors {
  currentPassword: String
  newPassword: String
}

# -- ENUMS
enum Provider {
  USERNAME
  GOOGLE
  GITHUB
}

enum UserOrderByType {
  username
  postCount
}
